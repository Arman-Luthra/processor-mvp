@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
      --background: 0 0% 100%;
--foreground: 20 14.3% 4.1%;
--muted: 60 4.8% 95.9%;
--muted-foreground: 25 5.3% 44.7%;
--popover: 0 0% 100%;
--popover-foreground: 20 14.3% 4.1%;
--card: 0 0% 100%;
--card-foreground: 20 14.3% 4.1%;
--border: 20 5.9% 90%;
--input: 20 5.9% 90%;
--primary: 207 90% 54%;
--primary-foreground: 211 100% 99%;
--secondary: 60 4.8% 95.9%;
--secondary-foreground: 24 9.8% 10%;
--accent: 60 4.8% 95.9%;
--accent-foreground: 24 9.8% 10%;
--destructive: 0 84.2% 60.2%;
--destructive-foreground: 60 9.1% 97.8%;
--ring: 20 14.3% 4.1%;
--radius: 0.5rem;
  }
  .dark {
      --background: 240 10% 3.9%;
--foreground: 0 0% 98%;
--muted: 240 3.7% 15.9%;
--muted-foreground: 240 5% 64.9%;
--popover: 240 10% 3.9%;
--popover-foreground: 0 0% 98%;
--card: 240 10% 3.9%;
--card-foreground: 0 0% 98%;
--border: 240 3.7% 15.9%;
--input: 240 3.7% 15.9%;
--primary: 207 90% 54%;
--primary-foreground: 211 100% 99%;
--secondary: 240 3.7% 15.9%;
--secondary-foreground: 0 0% 98%;
--accent: 240 3.7% 15.9%;
--accent-foreground: 0 0% 98%;
--destructive: 0 62.8% 30.6%;
--destructive-foreground: 0 0% 98%;
--ring: 240 4.9% 83.9%;
--radius: 0.5rem;
  }

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply font-sans antialiased bg-background text-foreground;
  }
}

/* Styling for TipTap editor elements */

/* Base editor styling */
.ProseMirror {
  min-height: 30px;
  padding: 4px 0;
  width: 100%;
  max-width: 100%;
  cursor: text;
  white-space: pre-wrap;
  word-break: break-all;
  overflow-wrap: break-word;
  hyphens: auto;
  margin-top: 0; /* Ensure no top margin */
}

/* Make sure paragraphs have proper spacing */
.ProseMirror p {
  margin: 0;
  min-height: 1.5em;
  max-width: 100%;
  word-wrap: break-word;
  word-break: break-all; /* Force breaks anywhere */
}

/* Force proper line wrapping in all text nodes */
.ProseMirror * {
  overflow-wrap: break-word;
  word-wrap: break-word;
  word-break: break-all; /* Force breaks for all content */
  max-width: 100%;
}

/* Handle long words and text strings better */
.ProseMirror span, .ProseMirror a {
  word-break: break-all;
  overflow-wrap: break-word;
  display: inline-block;
  max-width: 100%;
}

/* Block hover and active state styles */
.editor-content {
  position: relative;
  border-radius: 0.75rem;
  transition: background-color 0.3s ease;
  width: 100%;
  cursor: text;
  padding: 0.25rem 0.75rem; /* Reduced horizontal padding */
  box-sizing: border-box;
  overflow: visible; /* Allow overflow to show shadows */
  margin-top: 0; /* Ensure no top margin */
}

/* Simple hover effect strictly limited to editor content */
.active .editor-content:hover {
  background-color: transparent !important;
}
.editor-content:hover {
  background-color: rgba(59, 130, 246, 0.05) !important;
}

/* Drag state styling for editor content */
.editor-content.dragging {
  background-color: rgba(59, 130, 246, 0.05);
}

/* Custom style for block when dragging */
.dragging-block .w-\[120px\] {
  width: 120px !important; /* Force the width to remain fixed */
  min-width: 120px !important;
  padding-left: 2px !important;
}

/* Ensure flex-basis is also fixed */
.dragging-block .w-\[calc\(100\%-120px\)\] {
  width: calc(100% - 120px) !important;
  flex-basis: calc(100% - 120px) !important;
}

/* Make format menu more compact when dragging */
.dragging-block .flex.items-start.py-1.px-2 {
  padding: 2px !important;
}

/* Prevent flex container from adjusting based on content */
.dragging-block .w-full.flex.relative {
  display: flex !important;
  flex-wrap: nowrap !important;
}

/* Special wrapper for dragging that limits width to content */
.dragging-wrapper {
  width: fit-content !important;
  max-width: fit-content !important;
  overflow: visible !important;
}

/* Create custom background for dragging blocks */
.dragging-block {
  position: relative !important;
}

/* Custom background using pseudo-element */
.dragging-block::before {
  content: "";
  position: absolute;
  top: -4px;
  left: -4px;
  width: calc(100% - 40px); /* Less reduction for better fit around content */
  height: calc(100% + 8px);
  background-color: white;
  border-radius: 0.5rem;
  box-shadow: 0 15px 35px rgba(0, 0, 0, 0.2);
  z-index: -1;
}

/* For block types with longer text, adjust width */
.dragging-block.heading2::before,
.dragging-block.heading3::before,
.dragging-block.bulletList::before,
.dragging-block.orderedList::before {
  width: calc(100% - 20px); /* Less reduction for longer text types */
}

/* Preserve original content layout */
.dragging-block .editor-content {
  background-color: transparent !important;
}

/* Hide background when dragging */
.dragging-block:hover .editor-content {
  background-color: transparent !important;
}

/* Remove all the shadow-related pseudo elements as we're using a different approach */
.editor-content.dragging::after {
  display: none;
}

/* More targeted overflow handling */
.sortable-item {
  position: relative;
  z-index: 1;
}

.shadow-xl {
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.2), 0 10px 10px -5px rgba(0, 0, 0, 0.1);
}

/* More aggressive approach to overflow handling */
body, html, #root, #__next,
.min-h-screen, .w-full, .max-w-\[740px\],
.sortable-item, .space-y-3,
.w-\[calc\(100\%-100px\)\],
.ProseMirror, .editor-content,
.flex, .relative, .group {
  overflow: visible !important;
}

/* Add animation when the editor receives focus */
@keyframes highlight-block {
  0% { background-color: rgba(59, 130, 246, 0.1); }
  100% { background-color: transparent; }
}

/* Focus animation for the editor container */
.editor-content:has(.ProseMirror:focus) {
  animation: highlight-block 1s ease forwards;
}

/* Remove default focus styling */
.ProseMirror:focus {
  outline: none;
}

/* Set exact width for text container to prevent overflow */
.w-\[calc\(100\%-100px\)\] {
  width: calc(100% - 100px);
  max-width: calc(100% - 100px);
  overflow: hidden;
}

/* Updated width for text container */
.w-\[calc\(100\%-120px\)\] {
  width: calc(100% - 120px);
  max-width: calc(100% - 120px);
  overflow: hidden;
}

/* Ensure format controls are aligned consistently */
.w-\[100px\] {
  width: 100px;
  min-width: 100px;
  flex-shrink: 0;
}

/* Updated format controls width */
.w-\[120px\] {
  width: 120px;
  min-width: 120px;
  flex-shrink: 0;
}

/* Ensure padding is applied consistently */
.w-\[100px\].flex.justify-start {
  padding-left: 8px;
  justify-content: flex-start;
  align-items: flex-start;
}

/* Updated padding for wider format controls */
.w-\[120px\].flex.justify-start {
  padding-left: 8px;
  justify-content: flex-start;
  align-items: flex-start;
}

/* Code blocks specific styling */
.ProseMirror pre {
  background-color: #f7f6f3;
  border-radius: 0.25rem;
  padding: 0.75rem;
  font-family: monospace;
  font-size: 0.875rem;
  overflow-wrap: break-word;
  word-break: break-all;
  transition: background-color 0.3s ease;
  width: 100%;
}

/* Special hover effect for code blocks */
.code .editor-content {
  padding: 0; /* Remove padding for code blocks */
}

.code .editor-content .ProseMirror pre {
  margin: 0.25rem 0; /* Add margin instead of padding */
}

.code .editor-content:hover .ProseMirror pre {
  background-color: #eae8e2; /* Darker shade for hover */
}

/* Special focus effect for code blocks */
.code .editor-content:has(.ProseMirror:focus) {
  background-color: transparent; /* Remove default focus background */
  animation: none; /* Remove default animation */
}

.code .editor-content:has(.ProseMirror:focus) .ProseMirror pre {
  animation: code-block-highlight 1s ease forwards;
}

/* Animation for code block focus */
@keyframes code-block-highlight {
  0% { background-color: #e0ded6; } /* Even darker for initial focus */
  100% { background-color: #f7f6f3; } /* Back to original color */
}

/* Drag and drop styles */
[data-dnd-draggable] {
  /* Allow translations using CSS variables but prevent scaling */
  transform: translate3d(var(--translate-x, 0), var(--translate-y, 0), 0) scale(1) !important;
  /* Prevent width/height changes during drag */
  width: var(--original-width, 100%) !important;
  height: var(--original-height, auto) !important;
  transform-origin: 0 0 !important;
}

/* Transition for draggable elements */
.sortable-item {
  transition: transform 200ms cubic-bezier(0.25, 1, 0.5, 1), box-shadow 200ms ease;
}

/* Hide placeholder on all blocks by default */
.ProseMirror p.is-empty::before {
  content: none;
  display: none;
}

/* Only show placeholder on the first block */
.first-block .ProseMirror p.is-empty::before {
  content: "Start writing";
  color: #adb5bd;
  pointer-events: none;
  float: left;
  height: 0;
  display: block;
}

/* Title placeholder styling */
[contenteditable][data-placeholder]:empty::before {
  content: attr(data-placeholder);
  color: #adb5bd;
  pointer-events: none;
}

/* Drag and drop indicators */
.drag-over-top {
  box-shadow: 0 -2px 0 0 #3b82f6;
  position: relative;
  z-index: 10;
}

.drag-over-bottom {
  box-shadow: 0 2px 0 0 #3b82f6;
  position: relative;
  z-index: 10;
}

/* Drag handle styles */
.drag-handle {
  cursor: grab;
  transition: transform 100ms ease;
}

.drag-handle:active {
  transform: scale(0.95);
  cursor: grabbing;
}

/* Enhance drag handle visual */
.drag-handle:hover div {
  background-color: #6b7280;
}

/* Reset all list styling that might be inherited by headings */
.ProseMirror h1, .ProseMirror h2, .ProseMirror h3 {
  list-style: none !important;
  margin-left: 0 !important;
  padding-left: 0 !important;
}

/* Ensure headings don't have bullet points */
.ProseMirror h1::before, .ProseMirror h2::before, .ProseMirror h3::before {
  content: none !important;
  display: none !important;
}

/* Bullet lists */
.ProseMirror ul {
  list-style-type: disc;
  padding-left: 1.5rem;
  margin: 0.5rem 0;
}

/* Ordered lists */
.ProseMirror ol {
  list-style-type: decimal;
  padding-left: 1.5rem;
  margin: 0.5rem 0;
}

/* List items */
.ProseMirror li {
  margin-bottom: 0.25rem;
  position: relative;
}

/* Nested lists */
.ProseMirror li ul,
.ProseMirror li ol {
  margin-top: 0.25rem;
  margin-bottom: 0;
}

/* Fix list indentation */
.ProseMirror li p {
  margin: 0;
}

/* Ensure proper indentation for nested lists */
.ProseMirror ul ul,
.ProseMirror ol ol,
.ProseMirror ul ol,
.ProseMirror ol ul {
  padding-left: 1.5rem;
}

/* Improve the appearance of list items */
.ProseMirror ul li {
  list-style-type: disc;
}

.ProseMirror ol li {
  list-style-type: decimal;
}

.ProseMirror ul li li {
  list-style-type: circle;
}

.ProseMirror ol li li {
  list-style-type: lower-alpha;
}

.ProseMirror ul li li li {
  list-style-type: square;
}

.ProseMirror ol li li li {
  list-style-type: lower-roman;
}

/* Custom list styling for better control */
.bullet-list {
  margin-left: 0 !important;
}

.ordered-list {
  margin-left: 0 !important;
}

/* Custom placeholder styling is handled by TipTap's placeholder extension */

body.suppress-block-hover .editor-content:hover {
  background-color: transparent !important;
}

